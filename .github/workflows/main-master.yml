name: "Deploy"

on:
  push:
    branches:
      - master
  # pull_request:

env:
  KEY: "${{ secrets.APP_NAME }}-production"
  AWS_S3_BUCKET: "${{ secrets.APP_NAME }}-production"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APP_NAME: ${{ secrets.APP_NAME }}
  ENV: production
  SSL_CERTIFICATE_ID: ${{ secrets.SSL_CERTIFICATE_ID }}
  TERRAFORM_S3_BUCKET: ${{ secrets.TERRAFORM_S3_BUCKET }}
  REACT_APP_BACKEND_URL: ${{ secrets.BACKEND_URL }}
  REACT_APP_AUTH0_DOMAIN: ${{ secrets.REACT_APP_AUTH0_DOMAIN }}
  REACT_APP_AUTH0_AUDIENCE: ${{ secrets.REACT_APP_AUTH0_AUDIENCE }}
  REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 10.x
        uses: actions/setup-node@v1
        with:
          node-version: 10.x
      - name: Installing dependencies
        run: npm install
      - name: Building the Application
        run: npm run build
        env:
          REACT_APP_BACKEND_URL: ${{ secrets.BACKEND_URL }}
          REACT_APP_AUTH0_DOMAIN: ${{ secrets.REACT_APP_AUTH0_DOMAIN }}
          REACT_APP_AUTH0_AUDIENCE: ${{ secrets.REACT_APP_AUTH0_AUDIENCE }}
          REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
      - name: View Files
        run: ls
      - name: View build
        run: ls build
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: build/

  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - shell: bash
        working-directory: ci/scripts
        run: |
          bash build_vars.sh;
      - name: Terraform Vars
        run: cat ./ci/terraform.tfvars
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        working-directory: ci
        run: terraform init -upgrade -input=false -backend-config="key=$KEY" -backend-config="bucket=$TERRAFORM_S3_BUCKET"
      - name: Terraform Plan
        working-directory: ci
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        working-directory: ci
        run: terraform apply -auto-approve

  upload-to-s3:
    needs: [build, terraform]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: build
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build
      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          SOURCE_DIR: "build"
        # env:
        #   CI: true

  cloudfront-invalidation:
    needs: [upload-to-s3]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        working-directory: ci
        run: terraform init -upgrade -input=false -backend-config="key=$KEY" -backend-config="bucket=$TERRAFORM_S3_BUCKET"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Create Cloudfront invalidation
        working-directory: ci
        run: |
          echo $(echo ${{ steps.terraform.outputs.cloudfront_id }})
          aws cloudfront create-invalidation --distribution-id $(echo ${{ steps.terraform.outputs.cloudfront_id }})
